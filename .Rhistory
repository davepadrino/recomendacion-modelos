TRUE | c(TRUE, FALSE,FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(c(ints>7))
which(ints>7)
any(ints)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
swirl()
Sys.Date()
mean(c(2, 4, 5))
x
boring_function(x)
submit()
swirl()
Sys.Date()
mean(c(2, 4, 5))
x
submit()
library(swirl)
swirl()
paste(my_char, collapse = " ")
exit()
bye
swirl
swirl()
submit()
submit()
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
prob = c(0.3, 0.7)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpos
?rpois
rpois(5, 10)
my_pois<-replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
unclass(Sys.Date())
d1
d2 <-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
t2
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
d1
months(d1)
months(t1)
quarters(t2)
t3 <- 17 de octubre de 1986 08:24"
t3: 17 de octubre de 1986 08:24"
t3 <- c(17 de octubre de 1986 08:24")
t3 <- c("17 de octubre de 1986 08:24")
t3 <- "17 de octubre de 1986 08:24"
?strptime
t4<-strptime(t3, "%d de %B de %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
dim(cars)
class(cars)
plot(cars)
?plto
?plot
plot(x =cars$speed, y = cars$dist)
plot(dist ~ speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main("My Plot"))
plot(cars, main())
plot(cars)
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", secondary ="My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2
)
plot(cars, type="l")
mtcars
data(mtcars)
dim(mtcars)
head(mtcars)
?boxplot
boxpl()
boxplot(formula = mpg ~ cyl, data = mtcars)
hits(mtcars$mpg)
hist(mtcars$mpg)
?barplot
barplot(marital)
barplot(mtcars$mpg)
barplot(marital)
barplot(cars)
barplot(martial)
barplot(mtcars)
play()
nxt()
package(swirl)
library(swirl)
swirl()
a
a
a
a
a
a
a123121
bye()
swirl()
submit
submit()
swirl()
library(Getting_and_Cleaning_Data)
install_course_github('swirl_courses','Getting_and_Cleaning_Data')
library('swirl')
swirl()
swirl()
swirl()
install_course_github('swirl_courses','Getting_and_Cleaning_Data')
install_course_github('https://github.com/swirldev/swirl_courses','Getting_and_Cleaning_Data')
library('swirl')
install_from_swirl("Getting_and_Cleaning_Data")
install_course_github("swirl_courses", "Getting_and_Cleaning_Data")
install_course_github("https://github.com/swirldev/swirl_courses.git", "Getting_and_Cleaning_Data")
library('swirl')
install_course_github("https://github.com/swirldev/swirl_courses.git", "Getting_and_Cleaning_Data")
library('swirl')
install_course_zip("/home/dave/Downloads/swirl_courses-master.zip", multi=TRUE)
swirl()
swirl()
library(swirl)
install_course_github(davepadrino, Getting_and_Cleaning_Data)
install_course_github("davepadrino", Getting_and_Cleaning_Data)
install_course_github("davepadrino", "Getting_and_Cleaning_Data")
install_course_github("davepadrino", "Getting_and_Cleaning_Data")
install_course_zip(/home/dave/Downloads)
install_course_zip("/home/dave/Downloads", "Getting_and_Cleaning_Data")
install_course_zip("path/to/file/here/swirl_courses-master.zip", multi=TRUE,
which_course="Getting_and_Cleaning_Data")
install_course_zip("/home/dave/Downloads/swirl_courses-master.zip", multi=TRUE,
which_course="Getting_and_Cleaning_Data")
swirl()
exit()
bye()
exit()
swilr()
swirl()
swirl()
library(swirl)
swirl()
s
sd
library("openNLP")
acq <- "Gulf Applied Technologies Inc said it sold its subsidiaries engaged in pipeline and terminal operations for 12.2 mln dlrs. The company said the sale is subject to certain post closing adjustments, which it did not explain. Reuter."
acqTag <- tagPOS(acq)
sapply(strsplit(acqTag,"[[:punct:]]*/VB.?"),function(x) sub("(^.*\\s)(\\w+$)", "\\2", x))
grep("ht(tp(s)*)*", ["HTTPS://", "https://"], ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*", ("HTTPS://", "https://"), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*", c("HTTPS://", "https://"), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*", c("HTTPS://", "ht), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*", c("HTTPS://", "https://"), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*|(tco)*", c("HTTPS://", "https://", "tco.."), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*(://)+)+|(tco)*", c("HTTPS://dasdasdasdas", "https://asdasdasd", "tco.."), ignore.case = TRUE, value = TRUE)
install.packages('caret')
library('caret')
library('rpart')
library('rpart.plot')
install.packages('rpart.plot')
library('rpart.plot')
install.packages('caret')
library('caret')
library('caret')
library('rpart')
library('rpart.plot')
install.packages('caret')
library('caret')
library('rpart')
install.packages('ggplot2')
install.packages('pROC')
install = function(pkg){
# Si ya está instalado, no lo instala.
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, repos = "http:/cran.rstudio.com")
if (!require(pkg, character.only = TRUE)) stop(paste("load failure:", pkg))
}
}
install("jsonlite")
fetch_data = function(preamble, list){
data = preamble
for(elem in list){
data = paste0(data, paste0(strsplit(elem, " ")[[1]], collapse = "+"), "|", collapse = "")
}
return(substr(data, 0, nchar(data)-1))
}
# Install dependencies in Linux
# sudo apt-get install libcurl4-openssl-dev
install = function(pkg){
# Si ya está instalado, no lo instala.
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, repos = "http:/cran.rstudio.com")
if (!require(pkg, character.only = TRUE)) stop(paste("load failure:", pkg))
}
}
install("jsonlite")
fetch_data = function(preamble, list){
data = preamble
for(elem in list){
data = paste0(data, paste0(strsplit(elem, " ")[[1]], collapse = "+"), "|", collapse = "")
}
return(substr(data, 0, nchar(data)-1))
}
get_url = function(origins, destinations, key, mode = "driving", language = "es"){
# install(pkg)
# url base for distance matrix api
base = "https://maps.googleapis.com/maps/api/distancematrix/json?"
# This could change, using only some atributes from API
origin = fetch_data("origins=", origins)
destination = fetch_data("destinations=", destinations)
key = fetch_data("key=", key)
mode = fetch_data("mode=", mode)
language = fetch_data("language=", language)
# Getting final format for Google API
api_url = paste(c(base, paste0(c(origin, destination, key, mode, language), collapse = "&")), collapse = "")
return(api_url)
}
get_data = function(api_url){
return(fromJSON(api_url))
}
# To Complete
parse_data = function(json){
}
?confusion.matrix
?confusionMatrix
install = function(pkg){
# Si ya está instalado, no lo instala.
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, repos = "http:/cran.rstudio.com")
if (!require(pkg, character.only = TRUE)) stop(paste("load failure:", pkg))
}
}
install("recommenderlab")
library("recommenderlab")
?Recommender
?acast
setwd("~/Desktop/univ/Minería de Datos/Tareas/Tarea_4/recomendacion-modelos-master")
knit_hooks$set(webgl = hook_webgl)
library("arules")
library("dplyr")
library("arulesViz")
install.packages("arules")
library("dplyr")
install.packages("dplyr")
install.packages("arulesViz")
library("arules")
library("dplyr")
library("arulesViz")
periodico <- read.csv("periodico.csv")
example <- read.csv("example.csv")
example <- read.csv("example.csv")
ejemplo <- read.csv("ejemplo.csv")
names(ejemplo)
names(periodico)
head(ejemplo$X)
head(ejemplo$ID)
head(periodico$ID)
head(periodico$X)
ejemplo$X <- NULL
periodico$X <- NULL
?mutate
ejemplo$entry[1]
ejemplo$exit[1]
class(ejemplo$exit[1])
ejemplo$exit[1] - ejemplo$entry[1]
str(as.POSIXlt(ejemplo$entry[1]))
unclass(as.POSIXlt(ejemplo$entry[1]))
t1 <- unclass(as.POSIXlt(ejemplo$entry[1]))
difftime(ejemplo$exit[1], ejemplo$entry[1], unit="week")
difftime(ejemplo$exit[1], ejemplo$entry[1], unit="sec")
ejemplo$entry[1]
ejemplo$exit[1]
difftime(ejemplo$exit[8], ejemplo$entry[8], unit="sec")
difftime(ejemplo$exit[9], ejemplo$entry[9], unit="sec")
difftime(ejemplo$exit[14], ejemplo$entry[14], unit="sec")
difftime(2016-05-02 22:39:52, 2016-05-02 22:39:45, unit="sec")
difftime("2016-05-02 22:39:52", "2016-05-02 22:39:45", unit="sec")
t1 <- difftime("2016-05-02 22:39:52", "2016-05-02 22:39:45", unit="sec")
class(t1)
lenght(ejemplo$entry)
length(ejemplo$entry)
difftime(ejemplo$exit[8], ejemplo$entry[8], unit="sec")
as.numeric(difftime(ejemplo$exit[8], ejemplo$entry[8], unit="sec"))
example.bot <- as.character()
for(i in length(ejemplo$entry)){
if (as.numeric(difftime(ejemplo$exit[i], ejemplo$entry[i], unit="sec")) < 21 ){
example.bot <- c(example.bot,ejemplo$ID)
}
}
example.bot <- as.character()
for(i in length(ejemplo$entry)){
if (as.numeric(difftime(ejemplo$exit[i], ejemplo$entry[i], unit="sec")) < 80 ){
example.bot <- c(example.bot,ejemplo$ID)
}
}
example.bot
as.numeric(difftime(ejemplo$exit[8], ejemplo$entry[8], unit="sec"))
as.numeric(difftime(ejemplo$exit[8], ejemplo$entry[8], unit="sec")) < 80
example.bot <- as.character()
for(i in length(ejemplo$entry)){
if (as.numeric(difftime(ejemplo$exit[i], ejemplo$entry[i], unit="sec")) < 80 ){
example.bot <- c(ejemplo$ID)
}
}
as.numeric(difftime(ejemplo$exit[i], ejemplo$entry[i], unit="sec")) < 80
as.numeric(difftime(ejemplo$exit[8], ejemplo$entry[8], unit="sec")) < 80
rm(t1)
if (as.numeric(difftime(ejemplo$exit[8], ejemplo$entry[8], unit="sec")) < 80 ){
example.bot <- c(ejemplo$ID)
}
example.bot
if (as.numeric(difftime(ejemplo$exit[i], ejemplo$entry[i], unit="sec")) < 80 ){
example.bot <- c(ejemplo$ID[i])
}
if (as.numeric(difftime(ejemplo$exit[8], ejemplo$entry[8], unit="sec")) < 80 ){
example.bot <- c(ejemplo$ID[8])
}
example.bot
ejemplo$ID[8]
as.character(ejemplo$ID[8])
if (as.numeric(difftime(ejemplo$exit[8], ejemplo$entry[8], unit="sec")) < 80 ){
example.bot <- c(as.character(ejemplo$ID[8]))
}
example.bot <- as.character()
for(i in length(ejemplo$entry)){
if (as.numeric(difftime(ejemplo$exit[i], ejemplo$entry[i], unit="sec")) < 80 ){
example.bot <- c(example.bot, as.character(ejemplo$ID[i]))
}
}
example.bot <- as.character()
for(i in length(ejemplo$entry)){
if (as.numeric(difftime(ejemplo$exit[i], ejemplo$entry[i], unit="sec")) < 80 ){
example.bot <- c(as.character(ejemplo$ID[i]))
}
}
as.character(ejemplo$ID[i])
x <- c(1, 2)
x <- append(x, 3)
rm(x)
example.bots <- as.character()
for(i in length(ejemplo$entry)){
if (as.numeric(difftime(ejemplo$exit[i], ejemplo$entry[i], unit="sec")) < 80 ){
example.bots <- append(example.bots, as.character(ejemplo$ID[i]))
}
}
rm(example.bot)
example.bots <- append(example.bots, as.character(ejemplo$ID[8]))
length(ejemplo$entry)
example.bots <- as.character()
class(example.bots)
example.bots <- append(example.bots, as.character(ejemplo$ID[8]))
class(example.bots)
rm(i)
example.bots <- as.character()
for(i in length(ejemplo$entry)){
if (as.numeric(difftime(ejemplo$exit[i], ejemplo$entry[i], unit="sec")) < 80){
example.bots <- append(example.bots, as.character(ejemplo$ID[i]))
}
}
x <- append(x, 2)
x <- numeric()
x <- append(x, 2)
rm(x)
example.bots <- as.character()
for(i in length(ejemplo$entry)){
calc <- as.numeric(difftime(ejemplo$exit[i], ejemplo$entry[i], unit="sec"))
if (calc < 80){
example.bots <- append(example.bots, as.character(ejemplo$ID[i]))
}
}
for(i in length(ejemplo$entry)){
calc <- as.numeric(difftime(ejemplo$exit[i], ejemplo$entry[i], unit="sec"))
if (calc < 80){
example.bots <- append(example.bots, as.character(ejemplo$ID[i]))
}
}
for(i in length(ejemplo$entry)){
calc <- as.numeric(difftime(ejemplo$exit[i], ejemplo$entry[i], unit="sec"))
if (calc < 100){
example.bots <- append(example.bots, as.character(ejemplo$ID[i]))
}
}
for(i in 1:length(ejemplo$entry)){
calc <- as.numeric(difftime(ejemplo$exit[i], ejemplo$entry[i], unit="sec"))
if (calc < 100){
example.bots <- append(example.bots, as.character(ejemplo$ID[i]))
}
}
example.bots <- as.character()
for(i in 1:length(ejemplo$entry)){
calc <- as.numeric(difftime(ejemplo$exit[i], ejemplo$entry[i], unit="sec"))
if (calc < 1000){
example.bots <- append(example.bots, as.character(ejemplo$ID[i]))
}
}
example.bots
example.bots <- as.character()
for(i in 1:length(ejemplo$entry)){
calc <- as.numeric(difftime(ejemplo$exit[i], ejemplo$entry[i], unit="sec"))
if (calc < 20){
example.bots <- append(example.bots, as.character(ejemplo$ID[i]))
}
}
if(F){
example.bots <- as.character()
for(i in 1:length(ejemplo$entry)){
calc <- as.numeric(difftime(ejemplo$exit[i], ejemplo$entry[i], unit="sec"))
if (calc < 20){
example.bots <- append(example.bots, as.character(ejemplo$ID[i]))
}
}
}
example.bots <- as.character()
for(i in 1:length(periodico$entry)){
calc <- as.numeric(difftime(periodico$exit[i], periodico$entry[i], unit="sec"))
if (calc < 20){
example.bots <- append(example.bots, as.character(periodico$ID[i]))
}
}
length(example.bots)
find.bots <- function(periodico, example.bots){
calc <- as.numeric(difftime(periodico$exit, periodico$entry, unit="sec"))
if (calc < 20){
example.bots <- append(example.bots, as.character(periodico$ID[i]))
}
return(example.bots)
}
?apply
?lapply
?sapply
find.bots <- function(periodico, example.bots){
calc <- as.numeric(difftime(periodico$exit, periodico$entry, unit="sec"))
if (calc < 20){
example.bots <- append(example.bots, as.character(periodico$ID[i]))
}
return(example.bots)
}
lapply(periodico, find.bots)
example.bots <- as.character()
for(i in 1:length(periodico$entry)){
calc <- as.numeric(difftime(periodico$exit[i], periodico$entry[i], unit="sec"))
if (calc < 21){
example.bots <- append(example.bots, as.character(periodico$ID[i]))
}
}
length(example.bots)
head(example.bots)
